{
    "$schema": "./Templates.schema.json",
    "languages": [
        {
            "label": "C#",
            "extensionName": ".cs",
            "description": "Powerful, flexible and modern programming language.",
            "namespace": true,
            "templates": [
                {
                    "label": "Class",
                    "description": "A blueprint for creating objects.",
                    "filename": "Class",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public class $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Interface",
                    "description": "Defines a contract for classes to implement.",
                    "filename": "Interface",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public interface $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Enum",
                    "description": "Represents a set of named constants.",
                    "filename": "Enum",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public enum $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Struct",
                    "description": "Represents a lightweight object.",
                    "filename": "Struct",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public struct $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Abstract Class",
                    "description": "A blueprint for creating classes.",
                    "filename": "AbstractClass",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public abstract class $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Partial Class",
                    "description": "A blueprint for creating classes.",
                    "filename": "PartialClass",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public partial class $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Record",
                    "description": "A blueprint for creating immutable objects.",
                    "filename": "Record",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public record $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Global Using",
                    "description": "Keep your code clean by using global usings.",
                    "filename": "GlobalUsing",
                    "body": [
                        "// You can add more global usings here, comment or uncomment them by pressing Ctrl + /",
                        "// Here are some of the most used global using statements:",
                        "",
                        "// For console apps",
                        "global using static System.Console;",
                        "",
                        "// Do the math, work with collections",
                        "// global using System.Numerics;",
                        "// global using static System.Math;",
                        "// global using static System.Convert;",
                        "// global using System.Collections.Immutable;",
                        "",
                        "// Work with Text, Json and XML",
                        "// global using System.Xml;",
                        "// global using System.Text;",
                        "// global using System.Text.RegularExpressions;",
                        "// global using System.Text.Json;",
                        "// global using System.Text.Json.Serialization;",
                        "",
                        "// debugging and logging",
                        "// global using Xunit;",
                        "// global using System.Diagnostics;",
                        "// global using System.Diagnostics.CodeAnalysis;",
                        "",
                        "[sponsor]"
                    ]
                },
                {
                    "label": "Unit Test",
                    "description": "A blueprint for creating unit tests.",
                    "filename": "UnitTest",
                    "body": [
                        "namespace [namespace];",
                        "",
                        "public class $TM_FILENAME_BASE",
                        "{",
                        "    [Fact]",
                        "    public void Test1()",
                        "    {",
                        "        int a = 1;",
                        "        int b = 2;",
                        "        int expected = 3;",
                        "        int actual = a + b;",
                        "        // Testing...",
                        "        Assert.Equal(expected, actual);",
                        "    }",
                        "}"
                    ]
                },
                {
                    "label": "Razor model",
                    "description": "Razor model and code behind in separate files",
                    "filename": "Model",
                    "body": [
                        "using Microsoft.AspNetCore.Mvc.RazorPages;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "    public class ${TM_FILENAME_BASE/(.cshtml)//g}Model : PageModel",
                        "    {",
                        "        public void OnGet()",
                        "        {",
                        "        }",
                        "    }",
                        "}"
                    ],
                    "siblings": {
                        "languageLabel": "Razor Pages",
                        "templateLabel": "Page Empty and Model (Separated)"
                    }
                }
            ]
        },
        {
            "label": "Other",
            "description": "Language-agnostic templates.",
            "extensionName": "txt",
            "namespace": false,
            "templates": [
                {
                    "label": "Text File",
                    "description": "A blank text file.",
                    "filename": "TextFile",
                    "body": ["$0"],
                    "extensionName": "txt"
                },
                {
                    "label": "Markdown File",
                    "description": "A blank markdown file.",
                    "filename": "MarkdownFile",
                    "extensionName": "md",
                    "body": ["# $TM_FILENAME_BASE", "$0"]
                },
                {
                    "label": "Json File",
                    "description": "A blank json file.",
                    "filename": "Json",
                    "body": ["{", "\t$0", "}"],
                    "extensionName": "json"
                },
                {
                    "label": "Xml File",
                    "description": "A blank xml file.",
                    "filename": "Xml",
                    "body": [
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "<$TM_FILENAME_BASE>",
                        "\t$0",
                        "</$TM_FILENAME_BASE>"
                    ],
                    "extensionName": "xml"
                },
                {
                    "label": "Yaml File",
                    "description": "A blank yaml file.",
                    "filename": "Yaml",
                    "body": ["$TM_FILENAME_BASE:", "\t$0"],
                    "extensionName": "yaml"
                },
                {
                    "label": "People Json",
                    "description": "A file containing a list of people.",
                    "filename": "People",
                    "extensionName": "json",
                    "body": [
                        "{",
                        "\t\"people\": [",
                        "\t\t{",
                        "\t\t\t\"name\": \"John\",",
                        "\t\t\t\"age\": 30",
                        "\t\t},",
                        "\t\t{",
                        "\t\t\t\"name\": \"Jane\",",
                        "\t\t\t\"age\": 25",
                        "\t\t}",
                        "\t]",
                        "}"
                    ]
                },
                {
                    "label": "People Xml",
                    "description": "A file containing a list of people.",
                    "filename": "People",
                    "extensionName": "xml",
                    "body": [
                        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "<people>",
                        "\t<person>",
                        "\t\t<name>John</name>",
                        "\t\t<age>30</age>",
                        "\t</person>",
                        "\t<person>",
                        "\t\t<name>Jane</name>",
                        "\t\t<age>25</age>",
                        "\t</person>",
                        "</people>"
                    ]
                }
            ]
        },
        {
            "label": "Python",
            "description": "A simple, yet powerful programming language.",
            "extensionName": "py",
            "namespace": false,
            "templates": [
                {
                    "label": "Class",
                    "description": "A blueprint for creating objects.",
                    "filename": "Class",
                    "body": [
                        "",
                        "class $TM_FILENAME_BASE:",
                        "\t\"\"\"",
                        "\t$TM_FILENAME_BASE",
                        "\t\"\"\"",
                        "\tdef __init__(self):",
                        "\t\t${1:pass}"
                    ]
                },
                {
                    "label": "Unit Test",
                    "description": "Write unit tests for your code.",
                    "filename": "UnitTest",
                    "body": [
                        "import unittest",
                        "",
                        "class $TM_FILENAME_BASE(unittest.TestCase):",
                        "\tdef setUp(self):",
                        "\t\t${1:pass}",
                        "",
                        "\tdef test_sample(self):",
                        "\t\t\"\"\"",
                        "\t\tThis is a sample test case.",
                        "\t\t\"\"\"",
                        "\t\t# Arrange",
                        "\t\t# Act",
                        "\t\t# Assert",
                        "\t\tself.assertTrue(True)",
                        "",
                        "if __name__ == '__main__':",
                        "\tunittest.main()"
                    ]
                },
                {
                    "label": "Configuration File",
                    "description": "Configure you database connection",
                    "filename": "Config",
                    "body": [
                        "# Configuration settings",
                        "",
                        "DATABASE = {",
                        "\t'host': 'localhost',",
                        "\t'port': 5432,",
                        "\t'name': 'my_database',",
                        "\t'user': 'my_user',",
                        "\t'password': 'my_password',",
                        "}",
                        "",
                        "LOGGING = {",
                        "\t'level': 'INFO',",
                        "\t'format': '%(asctime)s - %(levelname)s - %(message)s',",
                        "\t'filename': 'app.log',",
                        "}",
                        "",
                        "API_KEY = 'your_api_key'",
                        "",
                        "$0"
                    ]
                },
                {
                    "label": "Data File",
                    "description": "A file for reading and writing data in formats like JSON, CSV, or XML.",
                    "filename": "Data",
                    "body": [
                        "import json",
                        "",
                        "def read_data(file_path):",
                        "\twith open(file_path, 'r') as f:",
                        "\t\tdata = json.load(f)",
                        "\t\treturn data",
                        "",
                        "def write_data(file_path, data):",
                        "\twith open(file_path, 'w') as f:",
                        "\t\tjson.dump(data, f, indent=4)"
                    ]
                },
                {
                    "label": "Constants",
                    "description": "A file for storing constants.",
                    "filename": "Constants",
                    "body": [
                        "\"\"\"",
                        "Global constants.",
                        "Use this file to define constant values used throughout your project.",
                        "\"\"\"",
                        "",
                        "E = 2.718281828459",
                        "",
                        "def get_e():",
                        "\treturn E",
                        "$0"
                    ]
                },
                {
                    "label": "Exceptions",
                    "description": "A file for defining custom exceptions.",
                    "filename": "Exceptions",
                    "body": [
                        "class MyException(Exception):",
                        "\tpass",
                        "",
                        "class AnotherException(Exception):",
                        "\tpass"
                    ]
                },
                {
                    "label": "Script",
                    "description": "A file for running a script.",
                    "filename": "Script",
                    "body": ["# $TM_FILENAME", "", "print(\"Hello World\")"]
                },
                {
                    "label": "Main",
                    "description": "A file that contains the entry point of your application.",
                    "filename": "Main",
                    "body": [
                        "\"\"\"",
                        "Module-level docstring.",
                        "\"\"\"",
                        "",
                        "def main() -> None:",
                        "\t\"\"\"",
                        "\tThe main function of the program.",
                        "\t\"\"\"",
                        "\t$0",
                        "",
                        "",
                        "if __name__ == '__main__':",
                        "\tmain()"
                    ]
                },
                {
                    "label": "Requirements",
                    "description": "A file that contains the dependencies of your application.",
                    "filename": "requirements",
                    "extensionName": "txt",
                    "body": [
                        "# Requirements.txt",
                        "$0",
                        "# Data Science Packages",
                        "numpy",
                        "pandas",
                        "matplotlib",
                        "scipy",
                        "scikit-learn",
                        "",
                        "# # Data Processing Packages",
                        "# openpyxl",
                        "# xlrd",
                        "# beautifulsoup4",
                        "# requests",
                        "# tensorflow",
                        "# keras",
                        "",
                        "# # Natural Language Processing Packages",
                        "# nltk",
                        "# spacy",
                        "# gensim",
                        "",
                        "# # Web Development Packages",
                        "# flask",
                        "# django",
                        "# fastapi",
                        "# requests",
                        "# beautifulsoup4",
                        "",
                        "# # Database Packages",
                        "# sqlalchemy",
                        "# psycopg2",
                        "# pymongo",
                        "# redis",
                        "",
                        "# # Testing Packages",
                        "# pytest",
                        "# unittest",
                        "",
                        "# # Utility Packages",
                        "# pyyaml",
                        "# tqdm",
                        "# click",
                        "# python-dotenv",
                        "",
                        "# # Visualization Packages",
                        "# seaborn",
                        "# plotly",
                        "# bokeh",
                        "# altair",
                        "# folium",
                        "",
                        "# # Machine Learning Packages",
                        "# xgboost",
                        "# lightgbm",
                        "# catboost",
                        "",
                        "# # Deep Learning Packages",
                        "# torch",
                        "# torchvision",
                        "# tensorflow",
                        "# keras",
                        "",
                        "[sponsor]"
                    ]
                }
            ]
        },
        {
            "label": "C# (Legacy)",
            "extensionName": ".cs",
            "description": "High-performance, object-oriented and strongly typed language for the .NET platform.",
            "namespace": true,
            "templates": [
                {
                    "label": "Class",
                    "description": "A class that represents a blueprint for creating objects with common properties and behaviors.",
                    "filename": "Class",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic class $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Interface",
                    "description": "A interface that defines a contract for classes to implement, specifying a set of methods, properties, and events.",
                    "filename": "IInterface",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic interface $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Enum",
                    "description": "A enum that represents a set of named constants.",
                    "filename": "Enum",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic enum $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Struct",
                    "description": "A struct that represents a stack-allocated value type.",
                    "filename": "Struct",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic struct $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Abstract Class",
                    "description": "A abstract class that provides a base implementation for derived classes and cannot be instantiated directly.",
                    "filename": "AbstractClass",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic abstract class $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Partial Class",
                    "description": "A partial class that allows a class to be split into multiple files and combined into a single class at compile-time.",
                    "filename": "PartialClass",
                    "body": [
                        "using System;",
                        "using System.Collections.Generic;",
                        "using System.Linq;",
                        "using System.Threading.Tasks;",
                        "",
                        "namespace [namespace]",
                        "{",
                        "\tpublic partial class $TM_FILENAME_BASE",
                        "\t{",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                }
            ]
        },
        {
            "label": "TypeScript",
            "description": "Statically typed superset of JavaScript that compiles to JavaScript.",
            "extensionName": ".ts",
            "namespace": false,
            "templates": [
                {
                    "label": "Class",
                    "description": "A class that represents a blueprint for creating objects with common properties and behaviors.",
                    "filename": "Class",
                    "body": [
                        "/**",
                        " * $TM_FILENAME_BASE",
                        " */",
                        "export class $TM_FILENAME_BASE {",
                        "\tconstructor() {",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Interface",
                    "description": "An interface that defines a contract for objects to adhere to, specifying a set of properties and methods.",
                    "filename": "IInterface",
                    "body": [
                        "/**",
                        " * $TM_FILENAME_BASE: Description of the ${1:EnumName}.",
                        " */",
                        "export interface ${1:InterfaceName} {",
                        "\t${2:propertyName}: ${3:string};",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Enum",
                    "description": "An enum that represents a set of named constants.",
                    "filename": "Enum",
                    "body": [
                        "/**",
                        " * $TM_FILENAME_BASE: Description of the ${1:EnumName}.",
                        " */",
                        "export enum ${1:EnumName} {",
                        "\t${2:Value1},",
                        "\t${3:Value2},",
                        "}"
                    ]
                },
                {
                    "label": "Type",
                    "description": "A type declaration that creates a new name for an existing type.",
                    "filename": "Type",
                    "body": ["export type $TM_FILENAME_BASE = {", "\t$0", "};"]
                },
                {
                    "label": "Abstract Class",
                    "description": "A abstract class that provides a base implementation for derived classes and cannot be instantiated directly.",
                    "filename": "AbstractClass",
                    "body": [
                        "export abstract class $TM_FILENAME_BASE {",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Function",
                    "description": "A function that encapsulates a block of code to perform a specific task.",
                    "filename": "Function",
                    "body": [
                        "/**",
                        " * $TM_FILENAME_BASE: Description of the function.",
                        " */",
                        "export function ${1:functionName}(){",
                        "\t$0",
                        "}"
                    ]
                },
                {
                    "label": "Index",
                    "description": "A index file (Hello World).",
                    "filename": "Index",
                    "body": [
                        "// $TM_FILENAME_BASE",
                        "",
                        "console.log(\"Hello World\");"
                    ]
                },
                {
                    "label": "Global Constants",
                    "description": "A file that defines global constants used throughout the application.",
                    "filename": "GlobalConst",
                    "body": [
                        "/**",
                        " * $TM_FILENAME_BASE: Description of the constant.",
                        " * Use this file to define constant values used throughout your project.",
                        " */",
                        "",
                        "export const ${1:SpeedOfLightMs} = ${2:299792458};",
                        "export const ${3:PI} = ${4:3.141592653589};",
                        "export const ${5:E} = ${6:2.718281828459};",
                        "$0"
                    ]
                },
                {
                    "label": "Compiler Options",
                    "description": "A set of strict compiler options. And a Index.ts file.",
                    "filename": "tsconfig",
                    "extensionName": "json",
                    "namespace": false,
                    "body": [
                        "{",
                        "\t// Strict compiler options.",
                        "\t\"compilerOptions\": {",
                        "\t\t\"module\": \"commonjs\",",
                        "\t\t\"target\": \"ES2020\",",
                        "\t\t\"outDir\": \"out\",",
                        "\t\t\"sourceMap\": true,",
                        "\t\t\"rootDir\": \"src\",",
                        "\t\t\"strict\": true ,",
                        "\t\t\"noImplicitReturns\": true,",
                        "\t\t\"noFallthroughCasesInSwitch\": true,",
                        "\t\t\"noUnusedParameters\": true,",
                        "\t\t\"moduleResolution\": \"node\",",
                        "\t\t\"resolveJsonModule\": true,",
                        "\t\t\"esModuleInterop\": true,",
                        "\t\t\"noUnusedLocals\": true,",
                        "\t\t\"noImplicitAny\": true,",
                        "\t\t\"strictNullChecks\": true,",
                        "\t\t\"noEmitOnError\": true,",
                        "\t\t\"alwaysStrict\": true,",
                        "\t\t\"noImplicitThis\": true,",
                        "\t\t\"noImplicitOverride\": true,",
                        "\t}",
                        "}",
                        "",
                        "[sponsor]"
                    ],
                    "siblings": {
                        "languageLabel": "TypeScript",
                        "templateLabel": "Index",
                        "parentUri": "/src/",
                        "overrideName": true
                    }
                }
            ]
        },
        {
            "label": "JavaScript",
            "extensionName": ".js",
            "description": "Web standard programming language that can be used to build interactive websites and applications.",
            "namespace": false,
            "templates": [
                {
                    "label": "Class",
                    "description": "A class.",
                    "filename": "Class",
                    "body": [
                        "class $TM_FILENAME_BASE {",
                        "\tconstructor() {",
                        "\t\t$0",
                        "\t}",
                        "}"
                    ]
                },
                {
                    "label": "Interface",
                    "description": "A interface.",
                    "filename": "IMyInterface",
                    "body": ["interface $TM_FILENAME_BASE {", "\t$0", "}"]
                },
                {
                    "label": "Enum",
                    "description": "A enum.",
                    "filename": "Enum",
                    "body": [
                        "const $TM_FILENAME_BASE = {",
                        "\tVALUE1: 'Value 1',",
                        "\tVALUE2: 'Value 2',",
                        "\tVALUE3: 'Value 3'",
                        "};"
                    ]
                }
            ]
        },
        {
            "label": "Razor Pages",
            "namespace": true,
            "extensionName": ".cshtml",
            "description": "A Razor Page is an ASP.NET Core MVC view ideal for serving web pages that are a mix of HTML, CSS, and server-side code.",
            "templates": [
                {
                    "label": "Layout",
                    "description": "Razor view layout page",
                    "filename": "_Layout",
                    "body": [
                        "<!DOCTYPE html>",
                        "",
                        "<html>",
                        "<head>",
                        "\t<meta name=\"viewport\" content=\"width=device-width\" />",
                        "\t<title>@ViewBag.Title</title>",
                        "</head>",
                        "<body>",
                        "\t<div>",
                        "\t\t@RenderBody()",
                        "\t</div>",
                        "</body>",
                        "</html>"
                    ]
                },
                {
                    "label": "View Start",
                    "description": "Used to set the default layout page for razor views",
                    "filename": "_ViewStart",
                    "body": ["@{", "\tLayout = \"_Layout\";", "}"]
                },
                {
                    "label": "Component",
                    "description": "Razor empty view component",
                    "filename": "Component",
                    "body": ["<h3>Component</h3>", "", "@code {", "", "}"]
                },
                {
                    "namespace": true,
                    "label": "Empty Page",
                    "description": "Empty Razor page",
                    "filename": "Index",
                    "body": [
                        "@page",
                        "@model [namespace].${TM_FILENAME_BASE}Model",
                        "@{",
                        "}"
                    ]
                },
                {
                    "namespace": true,
                    "label": "Page Empty and Model (Separated)",
                    "description": "Empty Razor page with model and code behind in separate files",
                    "filename": "Index",
                    "body": [
                        "@page",
                        "@model [namespace].${TM_FILENAME_BASE}Model",
                        "@{",
                        "}"
                    ],
                    "siblings": {
                        "languageLabel": "C#",
                        "templateLabel": "Razor model"
                    }
                },
                {
                    "namespace": true,
                    "label": "Page Standalone",
                    "description": "Empty Razor page, with model and code behind in a single file",
                    "filename": "Index",
                    "body": [
                        "@page ",
                        "@functions",
                        "{",
                        "  public string? DayName { get; set; }",
                        "  public void OnGet()",
                        "  {",
                        "\tViewData[\"Title\"] = \"Home page\";",
                        "\tModel.DayName = DateTime.Now.ToString(\"dddd\");",
                        "  }",
                        "}",
                        "<div class=\"jumbotron\">",
                        "  <h1 class=\"display-3\">Welcome to Razor Pages</h1>",
                        "  <p class=\"lead\">You can start to modify this file now!</p>",
                        "  <hr />",
                        "  <p>It's @Model.DayName!</p>",
                        "  <p> This file was generated by the <a href=\"https://marketplace.visualstudio.com/items?itemName=kineticSnippet.add-items\">add-items</a> extension, and it is an example of a single file razor page! </p>",
                        "  <p>",
                        "\t<a class=\"btn btn-primary\" href=\"https://github.com/kineticSnippet/AddItems\">",
                        "\t  Visit the github repo</a>",
                        "  </p>",
                        "</div>"
                    ]
                }
            ]
        },
        {
            "label": "C++",
            "extensionName": ".cpp",
            "description": "Robust, old school and low-level, c++ is fast, efficient, and portable.",
            "namespace": true,
            "templates": [
                {
                    "label": "Main Program",
                    "description": "A main program template.",
                    "filename": "Main",
                    "body": [
                        "#include <iostream>",
                        "",
                        "using namespace std;",
                        "",
                        "int main()",
                        "{",
                        "\t$0",
                        "\treturn 0;",
                        "}"
                    ]
                },
                {
                    "label": "Class",
                    "description": "A class template.",
                    "filename": "Class",
                    "body": [
                        "#include <iostream>",
                        "",
                        "using namespace std;",
                        "",
                        "class $TM_FILENAME_BASE",
                        "{",
                        "public:",
                        "\t$TM_FILENAME_BASE();",
                        "\t~$TM_FILENAME_BASE();",
                        "\t$0",
                        "};",
                        "",
                        "$TM_FILENAME_BASE::$TM_FILENAME_BASE()",
                        "{",
                        "\t// Constructor implementation",
                        "}",
                        "",
                        "$TM_FILENAME_BASE::~$TM_FILENAME_BASE()",
                        "{",
                        "\t// Destructor implementation",
                        "}"
                    ]
                },
                {
                    "label": "Struct",
                    "description": "A struct template.",
                    "filename": "Struct",
                    "body": [
                        "#include <iostream>",
                        "",
                        "using namespace std;",
                        "",
                        "struct $TM_FILENAME_BASE",
                        "{",
                        "\t$0",
                        "};"
                    ]
                },
                {
                    "label": "Enum",
                    "description": "A enum template.",
                    "filename": "Enum",
                    "body": [
                        "#include <iostream>",
                        "",
                        "using namespace std;",
                        "",
                        "enum class $TM_FILENAME_BASE",
                        "{",
                        "\tValue1,",
                        "\tValue2,",
                        "\tValue3",
                        "};"
                    ]
                },
                {
                    "label": "Template",
                    "description": "A template template.",
                    "filename": "Template",
                    "body": [
                        "#include <iostream>",
                        "",
                        "using namespace std;",
                        "",
                        "template <typename T>",
                        "class $TM_FILENAME_BASE",
                        "{",
                        "public:",
                        "\t$TM_FILENAME_BASE();",
                        "\t~$TM_FILENAME_BASE();",
                        "\t$0",
                        "};",
                        "",
                        "template <typename T>",
                        "$TM_FILENAME_BASE<T>::$TM_FILENAME_BASE()",
                        "{",
                        "\t// Constructor implementation",
                        "}",
                        "",
                        "template <typename T>",
                        "$TM_FILENAME_BASE<T>::~$TM_FILENAME_BASE()",
                        "{",
                        "\t// Destructor implementation",
                        "}"
                    ]
                }
            ]
        }
    ]
}
